/* eslint-disable complexity */
/* eslint-disable @next/next/no-img-element */

import { NextRequest } from 'next/server';

import { ImageResponse } from '@vercel/og';

import { seniorityMapping } from '~/features/filters/core/constants';
import { Job } from '~/features/jobs/core/types';
import { NEXT_PUBLIC_MW_URL } from '~/shared/core/constants';
import { capitalize, numFormatter } from '~/shared/utils';

export const config = {
  runtime: 'edge',
};

const latoFont = fetch(
  new URL('../../assets/Lato-Bold.ttf', import.meta.url),
  // eslint-disable-next-line unicorn/prefer-top-level-await
).then((res) => res.arrayBuffer());

const robotoFont = fetch(
  new URL('../../assets/Roboto-Medium.ttf', import.meta.url),
  // eslint-disable-next-line unicorn/prefer-top-level-await
).then((res) => res.arrayBuffer());

export default async function handler(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const shortUuid = searchParams.get('id');

  const jobPostEndpoint = `${NEXT_PUBLIC_MW_URL}/jobs/details/${shortUuid}`;

  const res = await fetch(jobPostEndpoint);
  if (!res.ok) {
    return new Response(`Failed to generate the image`, {
      status: 500,
    });
  }

  let job: Job;
  try {
    job = await res.json();
  } catch {
    return new Response(`Failed to generate the image`, {
      status: 500,
    });
  }

  const latoFontData = await latoFont;
  const robotoFontData = await robotoFont;

  const { jobpost, technologies, organization, fundingRounds, project } = job;

  const {
    seniority,
    jobLocation,
    minSalaryRange,
    maxSalaryRange,
    jobCommitment,
  } = jobpost;

  const seniorityLabel = getSeniorityLabel(seniority);

  const { url: orgUrl } = organization;
  const hasFundingRounds = fundingRounds.length > 0;

  const hasProject = Boolean(project);

  return new ImageResponse(
    (
      <div
        style={{
          height: '100%',
          width: '100%',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          background: '#0E0E0E',
          padding: '16px',
        }}
      >
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            background:
              'linear-gradient(90deg, rgba(66,54,241,1) 0%, rgba(84,58,245,1) 28%, rgba(108,62,249,1) 64%, rgba(134,67,255,0.9248074229691877) 100%)',
            padding: '24px',
            borderRadius: '24px',
          }}
        >
          <div tw="flex flex-col w-full">
            {/* JOB CARD HEADER */}
            <h2
              tw="text-xl font-black text-white m-0"
              style={{ fontFamily: 'Lato' }}
            >
              DevOps Engineer, Engineering Operations
            </h2>

            {/* JOB CARD TAGS */}
            <div tw="flex flex-wrap mt-2">
              {seniorityLabel && (
                <div tw="flex items-center rounded mr-4">
                  <LevelIcon />
                  <span
                    tw="text-xs text-white ml-1"
                    style={{ fontFamily: 'Roboto' }}
                  >
                    {seniorityLabel}
                  </span>
                </div>
              )}

              {jobLocation && jobLocation !== 'unspecified' && (
                <div tw="flex items-center rounded mr-4">
                  <LocationIcon />
                  <span
                    tw="text-xs text-white ml-1"
                    style={{ fontFamily: 'Roboto' }}
                  >
                    {capitalize(jobLocation)}
                  </span>
                </div>
              )}

              {minSalaryRange && maxSalaryRange && (
                <div tw="flex items-center rounded mr-4">
                  <MoneyIcon />
                  <span
                    tw="text-xs text-white ml-1"
                    style={{ fontFamily: 'Roboto' }}
                  >{`$${numFormatter.format(
                    minSalaryRange,
                  )} - $${numFormatter.format(maxSalaryRange)}`}</span>
                </div>
              )}

              {jobCommitment && (
                <div tw="flex items-center rounded mr-4">
                  <SuitcaseIcon />
                  <span
                    tw="text-xs text-white ml-1"
                    style={{ fontFamily: 'Roboto' }}
                  >
                    {jobCommitment}
                  </span>
                </div>
              )}
            </div>

            <div tw="flex w-full py-1">
              <hr tw="border-t border-white/10 w-full" />
            </div>

            {/* JOB CARD TECHS */}
            <div tw="flex flex-wrap mt-1" style={{ gap: '8px' }}>
              {technologies.map((tech) => {
                const colorIndex = getTechColorIndex(
                  tech.id,
                  techColorPool.length,
                );
                return (
                  <div
                    key={tech.id}
                    tw={`flex items-center justify-center rounded-sm border p-1 px-1.5 border-${techColorPool[colorIndex]}`}
                  >
                    <span
                      tw={`text-xs font-bold text-${techColorPool[colorIndex]}`}
                      style={{ fontFamily: 'Roboto' }}
                    >
                      {tech.name.toUpperCase()}
                    </span>
                  </div>
                );
              })}
            </div>

            <div tw="flex w-full py-2">
              <hr tw="border-t border-white/10 w-full" />
            </div>

            {/* JOB CARD ORG */}
            <div tw="flex items-center" style={{ gap: '32px' }}>
              <div tw="flex items-center" style={{ gap: '12px' }}>
                <img
                  src={getGoogleLogoUrl(orgUrl)}
                  width={40}
                  height={40}
                  alt={organization.name}
                  tw="rounded-xl"
                />
                <div tw="flex flex-col justify-center">
                  <h3
                    tw="text-lg font-black text-white m-0"
                    style={{ fontFamily: 'Lato' }}
                  >
                    {organization.name}
                  </h3>
                </div>
              </div>
              <div tw="flex flex-wrap grow pt-2" style={{ gap: '16px' }}>
                {/* ORG RAISED AMOUNT */}
                {hasFundingRounds && fundingRounds[0].raisedAmount && (
                  <div tw="flex items-center rounded mr-4">
                    <MoneyIcon />
                    <span
                      tw="text-xs text-white ml-1"
                      style={{ fontFamily: 'Roboto' }}
                    >
                      {`Last Funding: $${numFormatter.format(
                        fundingRounds[0].raisedAmount * 1_000_000,
                      )}`}
                    </span>
                  </div>
                )}

                {/* ORG FUNDING DATE */}
                {hasFundingRounds && fundingRounds[0].raisedAmount && (
                  <div tw="flex items-center rounded mr-4">
                    <MoneyIcon />
                    <span
                      tw="text-xs text-white ml-1"
                      style={{ fontFamily: 'Roboto' }}
                    >
                      {`Last Funding: $${numFormatter.format(
                        fundingRounds[0].raisedAmount * 1_000_000,
                      )}`}
                    </span>
                  </div>
                )}
              </div>
            </div>

            {hasProject && (
              <div tw="flex w-full py-2">
                <hr tw="border-t border-white/10 w-full" />
              </div>
            )}

            {/* JOB CARD PROJECT - show only 1 for card preview */}
            {project && (
              <div tw="flex flex-col">
                <div tw="flex items-center" style={{ gap: '32px' }}>
                  <div tw="flex items-center" style={{ gap: '12px' }}>
                    <img
                      src={getGoogleLogoUrl(project.url)}
                      width={40}
                      height={40}
                      alt={project.name}
                      tw="rounded-xl"
                    />
                    <div tw="flex flex-col justify-center">
                      <h3
                        tw="text-lg font-black text-white m-0"
                        style={{ fontFamily: 'Lato' }}
                      >
                        {project.name}
                      </h3>
                    </div>
                  </div>
                  <div tw="flex flex-wrap grow pt-2" style={{ gap: '16px' }}>
                    {/* PROJECT CATEGORY */}
                    {project.category && (
                      <div tw="flex items-center rounded mr-4">
                        <CategoryIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          {`Category: ${project.category}`}
                        </span>
                      </div>
                    )}

                    {/* PROJECT MAINNET */}
                    {project.isMainnet && (
                      <div tw="flex items-center rounded mr-4">
                        <MainnetIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          Mainnet
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                <div tw="flex items-center pl-2" style={{ gap: '32px' }}>
                  <div tw="flex flex-wrap grow pt-2" style={{ gap: '16px' }}>
                    {/* PROJECT TVL */}
                    {project.tvl && (
                      <div tw="flex items-center rounded mr-4">
                        <TvlIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          {`TVL: $${numFormatter.format(project.tvl)}`}
                        </span>
                      </div>
                    )}

                    {/* PROJECT MONTHLY VOLUME */}
                    {project.monthlyVolume && (
                      <div tw="flex items-center rounded mr-4">
                        <MonthlyVolumeIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          {`Monthly Volume: $${numFormatter.format(
                            project.monthlyVolume,
                          )}`}
                        </span>
                      </div>
                    )}

                    {/* PROJECT MONTHLY ACTIVE USERS */}
                    {project.monthlyActiveUsers && (
                      <div tw="flex items-center rounded mr-4">
                        <ActiveUsersIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          {`Monthly Active Users: $${numFormatter.format(
                            project.monthlyActiveUsers,
                          )}`}
                        </span>
                      </div>
                    )}

                    {/* PROJECT MONTHLY FEES */}
                    {project.monthlyFees && (
                      <div tw="flex items-center rounded mr-4">
                        <MonthlyVolumeIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          {`Monthly Fees: $${numFormatter.format(
                            project.monthlyFees,
                          )}`}
                        </span>
                      </div>
                    )}

                    {/* PROJECT MONTHLY REVENUE */}
                    {project.monthlyRevenue && (
                      <div tw="flex items-center rounded mr-4">
                        <RevenueIcon />
                        <span
                          tw="text-xs text-white ml-1"
                          style={{ fontFamily: 'Roboto' }}
                        >
                          {`Monthly Revenue: $${numFormatter.format(
                            project.monthlyRevenue,
                          )}`}
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    ),
    {
      width: 850,
      height: 480,
      fonts: [
        {
          name: 'Lato',
          data: latoFontData,
          style: 'normal',
        },
        {
          name: 'Roboto',
          data: robotoFontData,
          style: 'normal',
        },
      ],
    },
  );
}

const LevelIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M3.46138 11.1944C1.80205 10.1923 0.380527 9.31039 0.295975 9.24574C-0.010525 8.99177 4.39916e-05 9.18109 4.39916e-05 4.74823C4.39916e-05 0.864847 0.00532848 0.661674 0.100449 0.481588C0.253699 0.186064 0.523208 0.033684 0.924829 0.0105961C1.14678 -0.00325659 1.30003 0.0152137 1.40572 0.0613894C1.49027 0.09833 2.67399 0.804818 4.03211 1.63136L6.50525 3.13669L8.78815 1.7468C11.9218 -0.164872 11.6312 -0.00787416 12.054 0.0105961C12.4714 0.0290664 12.7409 0.181446 12.8995 0.481588C12.9946 0.661674 12.9999 0.864847 12.9999 4.74823C12.9999 9.22265 13.0157 8.99177 12.6775 9.26421C12.4979 9.40736 6.66907 12.9583 6.54224 12.9998C6.50525 13.0137 5.11543 12.201 3.46138 11.1944ZM9.0418 9.90143L11.5202 8.39149V7.13089C11.5202 6.43364 11.5097 5.86568 11.4991 5.86568C11.4832 5.86568 10.3629 6.53984 9.00481 7.36639C7.64141 8.19293 6.49996 8.85786 6.46297 8.84863C6.42598 8.83478 5.30038 8.15599 3.96341 7.3433C2.62643 6.53061 1.52198 5.86568 1.50612 5.86568C1.49027 5.86568 1.4797 6.43364 1.4797 7.13089V8.39149L3.95284 9.89682C5.31095 10.7234 6.4524 11.4021 6.49468 11.4021C6.53167 11.4068 7.6784 10.728 9.0418 9.90143ZM9.02595 5.75947L11.5202 4.24029V2.97508C11.5202 2.27782 11.5097 1.70986 11.4991 1.70986C11.4832 1.70986 10.3629 2.38403 9.00481 3.21057C7.56215 4.09253 6.50525 4.70667 6.46297 4.6882C6.4207 4.67434 5.2951 4.00018 3.95813 3.18749C2.62115 2.37479 1.51669 1.70986 1.50612 1.70986C1.49027 1.70986 1.4797 2.27782 1.4797 2.97508V4.23567L3.9 5.70406C5.2264 6.51214 6.352 7.20016 6.39427 7.23248C6.43655 7.26942 6.48411 7.29251 6.49996 7.28789C6.5211 7.27865 7.65727 6.59064 9.02595 5.75947Z"
      fill="white"
    />
  </svg>
);

const LocationIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M2.84375 12.1875H10.1562C10.3806 12.1875 10.5625 12.0056 10.5625 11.7812C10.5625 11.5569 10.3806 11.375 10.1562 11.375H2.84375C2.61938 11.375 2.4375 11.5569 2.4375 11.7812C2.4375 12.0056 2.61938 12.1875 2.84375 12.1875Z"
      fill="white"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6.5 3.25C6.5 3.25 7.34137 3.25 7.93631 3.84494C7.93631 3.84494 8.53125 4.43988 8.53125 5.28125C8.53125 5.28125 8.53125 6.12262 7.93631 6.71756C7.93631 6.71756 7.34137 7.3125 6.5 7.3125C6.5 7.3125 5.65863 7.3125 5.06369 6.71756C5.06369 6.71756 4.46875 6.12262 4.46875 5.28125C4.46875 5.28125 4.46875 4.43988 5.06369 3.84494C5.06369 3.84494 5.65863 3.25 6.5 3.25ZM6.5 4.0625C6.5 4.0625 5.99518 4.0625 5.63821 4.41946C5.63821 4.41946 5.28125 4.77643 5.28125 5.28125C5.28125 5.28125 5.28125 5.78607 5.63821 6.14304C5.63821 6.14304 5.99518 6.5 6.5 6.5C6.5 6.5 7.00482 6.5 7.36179 6.14304C7.36179 6.14304 7.71875 5.78607 7.71875 5.28125C7.71875 5.28125 7.71875 4.77643 7.36179 4.41946C7.36179 4.41946 7.00482 4.0625 6.5 4.0625Z"
      fill="white"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10.6286 3.57113C10.6286 3.57113 10.9688 4.39236 10.9688 5.28125C10.9688 5.28125 10.9688 7.71833 8.83781 10.1689C8.83781 10.1689 8.18294 10.922 7.39787 11.5893C7.39787 11.5893 7.00249 11.9254 6.73297 12.1141C6.59309 12.212 6.40691 12.212 6.26703 12.1141C6.26703 12.1141 5.99751 11.9254 5.60213 11.5893C5.60213 11.5893 4.81706 10.922 4.16219 10.1689C4.16219 10.1689 2.03125 7.71833 2.03125 5.28125C2.03125 5.28125 2.03125 4.39236 2.37141 3.57113C2.37141 3.57113 2.71158 2.74991 3.34012 2.12137C3.34012 2.12137 3.96866 1.49283 4.78988 1.15266C4.78988 1.15266 5.61111 0.8125 6.5 0.8125C6.5 0.8125 7.38889 0.8125 8.21012 1.15266C8.21012 1.15266 9.03134 1.49283 9.65988 2.12137C9.65988 2.12137 10.2884 2.74991 10.6286 3.57113ZM10.1562 5.28125C10.1562 5.28125 10.1563 4.55398 9.87793 3.88206C9.87793 3.88206 9.59962 3.21015 9.08536 2.69589C9.08536 2.69589 8.5711 2.18163 7.89919 1.90332C7.89919 1.90332 7.22727 1.625 6.5 1.625C6.5 1.625 5.77273 1.625 5.10081 1.90332C5.10081 1.90332 4.4289 2.18163 3.91464 2.69589C3.91464 2.69589 3.40038 3.21015 3.12207 3.88206C3.12207 3.88206 2.84375 4.55398 2.84375 5.28125C2.84375 5.28125 2.84375 7.41448 4.77531 9.63577C4.77531 9.63577 5.38997 10.3426 6.12834 10.9702C6.12834 10.9702 6.33444 11.1454 6.5 11.2748C6.5 11.2748 6.66556 11.1454 6.87166 10.9702C6.87166 10.9702 7.61003 10.3426 8.22469 9.63577C8.22469 9.63577 10.1562 7.41448 10.1562 5.28125Z"
      fill="white"
    />
  </svg>
);

const MoneyIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0.40625 3.65625C0.40625 3.65625 0.40625 3.3197 0.644226 3.08173C0.644226 3.08173 0.882202 2.84375 1.21875 2.84375H11.7812C11.7812 2.84375 12.1178 2.84375 12.3558 3.08173C12.3558 3.08173 12.5938 3.3197 12.5938 3.65625V9.34375C12.5938 9.34375 12.5938 9.6803 12.3558 9.91827C12.3558 9.91827 12.1178 10.1562 11.7812 10.1562H1.21875C1.21875 10.1562 0.882202 10.1562 0.644225 9.91827C0.644225 9.91827 0.40625 9.6803 0.40625 9.34375V3.65625ZM1.21875 3.65625V9.34375L11.7812 9.34375V3.65625H1.21875Z"
      fill="white"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6.5 4.46875C6.5 4.46875 7.34137 4.46875 7.93631 5.06369C7.93631 5.06369 8.53125 5.65863 8.53125 6.5C8.53125 6.5 8.53125 7.34137 7.93631 7.93631C7.93631 7.93631 7.34137 8.53125 6.5 8.53125C6.5 8.53125 5.65863 8.53125 5.06369 7.93631C5.06369 7.93631 4.46875 7.34137 4.46875 6.5C4.46875 6.5 4.46875 5.65863 5.06369 5.06369C5.06369 5.06369 5.65863 4.46875 6.5 4.46875ZM6.5 5.28125C6.5 5.28125 5.99518 5.28125 5.63821 5.63821C5.63821 5.63821 5.28125 5.99518 5.28125 6.5C5.28125 6.5 5.28125 7.00482 5.63821 7.36179C5.63821 7.36179 5.99518 7.71875 6.5 7.71875C6.5 7.71875 7.00482 7.71875 7.36179 7.36179C7.36179 7.36179 7.71875 7.00482 7.71875 6.5C7.71875 6.5 7.71875 5.99518 7.36179 5.63821C7.36179 5.63821 7.00482 5.28125 6.5 5.28125Z"
      fill="white"
    />
    <path
      d="M8.66998 3.55573L11.92 6.39948C11.994 6.46428 12.0891 6.5 12.1875 6.5C12.1965 6.5 12.2055 6.4997 12.2145 6.4991C12.322 6.49193 12.4223 6.44235 12.4932 6.36127C12.558 6.28721 12.5938 6.19215 12.5938 6.09375C12.5938 6.08473 12.5935 6.07572 12.5929 6.06673C12.5857 5.95922 12.5361 5.85897 12.455 5.78802L9.20502 2.94427C9.13096 2.87947 9.0359 2.84375 8.9375 2.84375C8.92848 2.84375 8.91947 2.84405 8.91048 2.84465C8.80297 2.85182 8.70272 2.9014 8.63177 2.98248C8.56697 3.05654 8.53125 3.1516 8.53125 3.25C8.53125 3.25902 8.53155 3.26803 8.53215 3.27702C8.53932 3.38453 8.5889 3.48478 8.66998 3.55573Z"
      fill="white"
    />
    <path
      d="M12.4549 7.21208C12.5431 7.13494 12.5937 7.0234 12.5938 6.90625C12.5938 6.90125 12.5937 6.89626 12.5935 6.89127C12.59 6.79808 12.5546 6.70891 12.4932 6.63873C12.4161 6.55057 12.3046 6.5 12.1875 6.5C12.1825 6.5 12.1775 6.50009 12.1725 6.50028C12.0793 6.50372 11.9902 6.53911 11.92 6.60052L8.66998 9.44427C8.58182 9.52141 8.53125 9.63285 8.53125 9.75C8.53125 9.755 8.53134 9.75999 8.53153 9.76498C8.53497 9.85817 8.57036 9.94734 8.63177 10.0175C8.70891 10.1057 8.82035 10.1562 8.9375 10.1562C8.9425 10.1562 8.94749 10.1562 8.95248 10.156C9.04567 10.1525 9.13484 10.1171 9.20502 10.0557L12.4549 7.21208Z"
      fill="white"
    />
    <path
      d="M3.79487 2.94436L0.544983 5.78802C0.45682 5.86516 0.40625 5.9766 0.40625 6.09375C0.40625 6.09875 0.406342 6.10374 0.406526 6.10873C0.409966 6.20192 0.44536 6.29109 0.506766 6.36127C0.583908 6.44943 0.695353 6.5 0.8125 6.5C0.817496 6.5 0.822492 6.49991 0.827484 6.49972C0.920672 6.49628 1.00984 6.46089 1.08002 6.39948L4.32991 3.55583C4.41807 3.47869 4.46875 3.36715 4.46875 3.25C4.46875 3.245 4.46866 3.24001 4.46847 3.23502C4.46503 3.14183 4.42964 3.05266 4.36823 2.98248C4.29109 2.89432 4.17965 2.84375 4.0625 2.84375C4.0575 2.84375 4.05251 2.84384 4.04752 2.84403C3.95433 2.84747 3.86505 2.88296 3.79487 2.94436Z"
      fill="white"
    />
    <path
      d="M4.33002 9.44427L1.08002 6.60052C1.00596 6.53572 0.910903 6.5 0.8125 6.5C0.803485 6.5 0.794472 6.5003 0.785477 6.5009C0.677971 6.50807 0.577716 6.55765 0.506766 6.63873C0.441967 6.71279 0.40625 6.80785 0.40625 6.90625C0.40625 6.91527 0.40655 6.92428 0.40715 6.93327C0.414317 7.04078 0.463897 7.14103 0.544983 7.21198L3.79498 10.0557C3.86904 10.1205 3.9641 10.1562 4.0625 10.1562C4.07152 10.1562 4.08053 10.156 4.08952 10.1554C4.19703 10.1482 4.29728 10.0986 4.36823 10.0175C4.43303 9.94346 4.46875 9.8484 4.46875 9.75C4.46875 9.74098 4.46845 9.73197 4.46785 9.72298C4.46068 9.61547 4.4111 9.51522 4.33002 9.44427Z"
      fill="white"
    />
  </svg>
);

const SuitcaseIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M1.21875 4.0625C1.21875 4.0625 1.21875 3.72595 1.45673 3.48798C1.45673 3.48798 1.6947 3.25 2.03125 3.25H10.9688C10.9688 3.25 11.3053 3.25 11.5433 3.48798C11.5433 3.48798 11.7812 3.72595 11.7812 4.0625V10.5625C11.7812 10.5625 11.7812 10.899 11.5433 11.137C11.5433 11.137 11.3053 11.375 10.9688 11.375H2.03125C2.03125 11.375 1.6947 11.375 1.45673 11.137C1.45673 11.137 1.21875 10.899 1.21875 10.5625V4.0625ZM2.03125 4.0625V10.5625H10.9688V4.0625H2.03125Z"
      fill="white"
    />
    <path
      d="M4.0625 2.84375V10.9688C4.0625 11.1931 4.24438 11.375 4.46875 11.375C4.69312 11.375 4.875 11.1931 4.875 10.9688V2.84375C4.875 2.67548 4.99399 2.55649 4.99399 2.55649C5.11298 2.4375 5.28125 2.4375 5.28125 2.4375H7.71875C7.88702 2.4375 8.00601 2.55649 8.00601 2.55649C8.125 2.67548 8.125 2.84375 8.125 2.84375V10.9688C8.125 11.1931 8.30688 11.375 8.53125 11.375C8.75562 11.375 8.9375 11.1931 8.9375 10.9688V2.84375C8.9375 2.33893 8.58054 1.98196 8.58054 1.98196C8.22357 1.625 7.71875 1.625 7.71875 1.625H5.28125C4.77643 1.625 4.41946 1.98196 4.41946 1.98196C4.0625 2.33893 4.0625 2.84375 4.0625 2.84375Z"
      fill="white"
    />
  </svg>
);

const getSeniorityLabel = (rawSeniority: string | null) => {
  if (!rawSeniority) return null;
  let label = '';

  for (const [k, v] of Object.entries(seniorityMapping)) {
    if (v === rawSeniority) {
      label = k;
    }
  }

  return label;
};

const techColorPool = [
  'red-400',
  'orange-400',
  'orange-300',
  'yellow-500',
  'lime-400',
  'green-400',
  'teal-200',
  'purple-300',
  'fuchsia-300',
  'pink-300',
  'rose-300',
];

const CategoryIcon = () => (
  <svg
    width="15"
    height="13"
    viewBox="0 0 15 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M13.4941 2.23441H8.87527L7.02239 0.848085C6.83873 0.70787 6.6136 0.632826 6.38254 0.634804H3.36328C3.08045 0.634804 2.80921 0.747157 2.60922 0.947147C2.40923 1.14714 2.29687 1.41838 2.29687 1.70121V2.76762H1.23047C0.94764 2.76762 0.676395 2.87997 0.476406 3.07996C0.276416 3.27995 0.164063 3.55119 0.164062 3.83402V11.2989C0.164063 11.5817 0.276416 11.8529 0.476406 12.0529C0.676395 12.2529 0.94764 12.3653 1.23047 12.3653H11.4213C11.6877 12.3635 11.9427 12.2569 12.131 12.0686C12.3194 11.8802 12.426 11.6252 12.4277 11.3589V10.2325H13.5541C13.8205 10.2307 14.0755 10.1241 14.2638 9.93576C14.4522 9.74739 14.5588 9.49242 14.5605 9.22604V3.30082C14.5605 3.01799 14.4482 2.74675 14.2482 2.54676C14.0482 2.34677 13.777 2.23441 13.4941 2.23441ZM13.4941 9.16605H12.4277V5.43363C12.4277 5.1508 12.3154 4.87956 12.1154 4.67957C11.9154 4.47958 11.6442 4.36723 11.3613 4.36723H6.74246L4.88957 2.9809C4.70592 2.84068 4.48079 2.76564 4.24973 2.76762H3.36328V1.70121H6.38254L8.23542 3.08754C8.41908 3.22775 8.64421 3.3028 8.87527 3.30082H13.4941V9.16605Z"
      fill="white"
    />
  </svg>
);

const MainnetIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="13"
    height="13"
    viewBox="0 0 64 64"
    fill="none"
    stroke="currentColor"
    className="fill-white stroke-2"
  >
    <path d="M8 48V16l20 16v16" />
    <path d="M56 48V16L36 32v16" />
  </svg>
);

const ActiveUsersIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M6.09187 2.84375C6.09187 2.52236 6.18718 2.20818 6.36573 1.94095C6.54429 1.67372 6.79808 1.46544 7.09501 1.34245C7.39194 1.21945 7.71867 1.18727 8.03389 1.24997C8.34911 1.31268 8.63866 1.46744 8.86592 1.6947C9.09318 1.92196 9.24795 2.21151 9.31065 2.52673C9.37335 2.84195 9.34117 3.16868 9.21818 3.46561C9.09518 3.76254 8.8869 4.01633 8.61967 4.19489C8.35244 4.37345 8.03827 4.46875 7.71687 4.46875C7.28631 4.46741 6.87376 4.29578 6.5693 3.99132C6.26485 3.68686 6.09321 3.27432 6.09187 2.84375ZM11.3731 6.78438C11.3731 6.67663 11.3303 6.5733 11.2541 6.49711C11.1779 6.42093 11.0746 6.37813 10.9669 6.37813C10.9014 6.3776 10.8369 6.39331 10.779 6.42383H10.7841C10.779 6.42383 10.454 6.58125 9.85984 6.52031C9.2657 6.45938 8.36179 6.19531 7.1532 5.2457C6.39148 4.65156 5.20828 3.99648 3.88289 4.25039C3.08054 4.40273 2.61843 4.81406 2.56765 4.85977C2.52772 4.89541 2.49532 4.93868 2.47237 4.98704C2.44942 5.03539 2.43637 5.08785 2.43401 5.14133C2.43164 5.1948 2.44 5.24821 2.45859 5.2984C2.47718 5.3486 2.50563 5.39456 2.54226 5.43359C2.615 5.51303 2.71631 5.56033 2.82392 5.56509C2.93152 5.56986 3.03662 5.53169 3.11609 5.45899C3.17195 5.4082 4.42625 4.32149 6.39656 5.69258C6.15517 6.50129 5.7792 7.26353 5.28445 7.94727L5.16257 8.10469C4.20281 9.33359 3.02468 9.88203 1.66375 9.74492C1.556 9.73415 1.44839 9.76662 1.36459 9.83518C1.28078 9.90375 1.22765 10.0028 1.21687 10.1105C1.2061 10.2183 1.23856 10.3259 1.30713 10.4097C1.3757 10.4935 1.47475 10.5466 1.5825 10.5574C1.75007 10.5727 1.9075 10.5777 2.06492 10.5777C3.72039 10.5777 4.93914 9.69414 5.78211 8.63281C6.76726 8.89688 8.52937 9.65859 8.52937 11.7762C8.52937 11.8839 8.57217 11.9872 8.64836 12.0634C8.72455 12.1396 8.82788 12.1824 8.93562 12.1824C9.04337 12.1824 9.1467 12.1396 9.22288 12.0634C9.29907 11.9872 9.34187 11.8839 9.34187 11.7762C9.34187 10.5219 8.82898 9.4707 7.85906 8.73438C7.33093 8.3332 6.74187 8.08438 6.27468 7.93203C6.61093 7.38783 6.88355 6.80681 7.08718 6.20039C8.39734 7.10938 9.43328 7.33281 10.1341 7.33281C10.8348 7.33281 11.1243 7.15508 11.1548 7.13477C11.2199 7.10209 11.2747 7.05209 11.3132 6.99027C11.3517 6.92845 11.3725 6.85721 11.3731 6.78438Z"
      fill="white"
    />
  </svg>
);

const MonthlyVolumeIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M6.5 1.21875C5.45547 1.21875 4.43439 1.52849 3.5659 2.1088C2.6974 2.68911 2.02049 3.51393 1.62076 4.47895C1.22104 5.44398 1.11645 6.50586 1.32023 7.53032C1.52401 8.55478 2.027 9.49581 2.76559 10.2344C3.50419 10.973 4.44522 11.476 5.46968 11.6798C6.49414 11.8835 7.55603 11.779 8.52105 11.3792C9.48607 10.9795 10.3109 10.3026 10.8912 9.4341C11.4715 8.56561 11.7813 7.54453 11.7813 6.5C11.7786 5.10015 11.2213 3.7584 10.2314 2.76856C9.2416 1.77871 7.89985 1.22143 6.5 1.21875ZM7.10938 8.9375H6.90625V9.34375C6.90625 9.45149 6.86345 9.55483 6.78726 9.63101C6.71108 9.7072 6.60775 9.75 6.5 9.75C6.39226 9.75 6.28893 9.7072 6.21274 9.63101C6.13655 9.55483 6.09375 9.45149 6.09375 9.34375V8.9375H5.28125C5.17351 8.9375 5.07018 8.8947 4.99399 8.81851C4.9178 8.74233 4.875 8.63899 4.875 8.53125C4.875 8.42351 4.9178 8.32017 4.99399 8.24399C5.07018 8.1678 5.17351 8.125 5.28125 8.125H7.10938C7.27099 8.125 7.42599 8.0608 7.54027 7.94652C7.65455 7.83224 7.71875 7.67724 7.71875 7.51562C7.71875 7.35401 7.65455 7.19901 7.54027 7.08473C7.42599 6.97045 7.27099 6.90625 7.10938 6.90625H5.89063C5.51352 6.90625 5.15186 6.75645 4.88521 6.48979C4.61856 6.22314 4.46875 5.86148 4.46875 5.48437C4.46875 5.10727 4.61856 4.74561 4.88521 4.47896C5.15186 4.2123 5.51352 4.0625 5.89063 4.0625H6.09375V3.65625C6.09375 3.54851 6.13655 3.44517 6.21274 3.36899C6.28893 3.2928 6.39226 3.25 6.5 3.25C6.60775 3.25 6.71108 3.2928 6.78726 3.36899C6.86345 3.44517 6.90625 3.54851 6.90625 3.65625V4.0625H7.71875C7.8265 4.0625 7.92983 4.1053 8.00601 4.18149C8.0822 4.25767 8.125 4.36101 8.125 4.46875C8.125 4.57649 8.0822 4.67983 8.00601 4.75601C7.92983 4.8322 7.8265 4.875 7.71875 4.875H5.89063C5.72901 4.875 5.57401 4.9392 5.45973 5.05348C5.34545 5.16776 5.28125 5.32276 5.28125 5.48437C5.28125 5.64599 5.34545 5.80099 5.45973 5.91527C5.57401 6.02955 5.72901 6.09375 5.89063 6.09375H7.10938C7.48648 6.09375 7.84814 6.24355 8.11479 6.51021C8.38145 6.77686 8.53125 7.13852 8.53125 7.51562C8.53125 7.89273 8.38145 8.25439 8.11479 8.52104C7.84814 8.7877 7.48648 8.9375 7.10938 8.9375Z"
      fill="white"
    />
  </svg>
);

const RevenueIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M9.34375 4.55V4.26562C9.34375 2.99102 7.42422 2.03125 4.875 2.03125C2.32578 2.03125 0.40625 2.99102 0.40625 4.26562V6.29688C0.40625 7.3582 1.73672 8.20117 3.65625 8.45508V8.73438C3.65625 10.009 5.57578 10.9688 8.125 10.9688C10.6742 10.9688 12.5938 10.009 12.5938 8.73438V6.70312C12.5938 5.65195 11.3039 4.80898 9.34375 4.55ZM3.65625 7.62734V6.42383C4.0604 6.47577 4.46752 6.50121 4.875 6.5C5.28248 6.50121 5.6896 6.47577 6.09375 6.42383V7.62734C5.69058 7.69017 5.28303 7.72074 4.875 7.71875C4.46697 7.72074 4.05942 7.69017 3.65625 7.62734ZM8.53125 5.58086V6.29688C8.53125 6.72344 7.90156 7.18047 6.90625 7.45977V6.27148C7.56133 6.11406 8.11484 5.87539 8.53125 5.58086ZM1.21875 6.29688V5.58086C1.63516 5.87539 2.18867 6.11406 2.84375 6.27148V7.45977C1.84844 7.18047 1.21875 6.72344 1.21875 6.29688ZM4.46875 8.73438V8.52109L4.875 8.53125C5.07474 8.53125 5.26771 8.52617 5.45391 8.51602C5.65703 8.58711 5.87031 8.64805 6.09375 8.70391V9.89727C5.09844 9.61797 4.46875 9.16094 4.46875 8.73438ZM6.90625 10.0648V8.85625C7.31035 8.90926 7.71743 8.9364 8.125 8.9375C8.53248 8.93871 8.9396 8.91327 9.34375 8.86133V10.0648C8.53582 10.1867 7.71418 10.1867 6.90625 10.0648ZM10.1562 9.89727V8.70898C10.8113 8.55156 11.3648 8.31289 11.7812 8.01836V8.73438C11.7812 9.16094 11.1516 9.61797 10.1562 9.89727Z"
      fill="white"
    />
  </svg>
);

const TvlIcon = () => (
  <svg
    width="13"
    height="13"
    viewBox="0 0 13 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M7.52323 8.84443C7.80664 8.84443 8.03639 8.62975 8.03639 8.36492C8.03639 8.1001 7.80664 7.88541 7.52323 7.88541C7.23982 7.88541 7.01007 8.1001 7.01007 8.36492C7.01007 8.62975 7.23982 8.84443 7.52323 8.84443Z"
      fill="white"
    />
    <path
      d="M10.9443 5.96738H9.40481V4.84853C9.40481 4.38223 9.20657 3.93502 8.85371 3.6053C8.50084 3.27557 8.02226 3.09033 7.52323 3.09033C7.02421 3.09033 6.54562 3.27557 6.19275 3.6053C5.83989 3.93502 5.64165 4.38223 5.64165 4.84853V5.96738H4.10218C3.92072 5.96738 3.74668 6.03474 3.61837 6.15464C3.49005 6.27454 3.41797 6.43716 3.41797 6.60673V11.0821C3.41797 11.2517 3.49005 11.4143 3.61837 11.5342C3.74668 11.6541 3.92072 11.7215 4.10218 11.7215H10.9443C11.1257 11.7215 11.2998 11.6541 11.4281 11.5342C11.5564 11.4143 11.6285 11.2517 11.6285 11.0821V6.60673C11.6285 6.43716 11.5564 6.27454 11.4281 6.15464C11.2998 6.03474 11.1257 5.96738 10.9443 5.96738ZM7.86534 9.43582V10.1231C7.86534 10.2079 7.82929 10.2892 7.76514 10.3492C7.70098 10.4091 7.61396 10.4428 7.52323 10.4428C7.4325 10.4428 7.34548 10.4091 7.28133 10.3492C7.21717 10.2892 7.18113 10.2079 7.18113 10.1231V9.43582C6.9055 9.35904 6.66867 9.19211 6.51393 8.96557C6.35919 8.73903 6.29688 8.46802 6.33841 8.20208C6.37993 7.93615 6.5225 7.69306 6.74006 7.51728C6.95762 7.34149 7.23562 7.24476 7.52323 7.24476C7.81084 7.24476 8.08884 7.34149 8.3064 7.51728C8.52396 7.69306 8.66653 7.93615 8.70806 8.20208C8.74958 8.46802 8.68727 8.73903 8.53253 8.96557C8.37779 9.19211 8.14096 9.35904 7.86534 9.43582ZM8.7206 5.96738H6.32586V4.84853C6.32586 4.55179 6.45201 4.26721 6.67656 4.05738C6.90111 3.84756 7.20567 3.72968 7.52323 3.72968C7.84079 3.72968 8.14535 3.84756 8.3699 4.05738C8.59445 4.26721 8.7206 4.55179 8.7206 4.84853V5.96738Z"
      fill="white"
    />
    <path
      d="M2.7354 1.38531C2.64093 1.38531 2.56435 1.46283 2.56435 1.55847V1.90478C2.56435 2.00041 2.64093 2.07793 2.7354 2.07793C2.82987 2.07793 2.90646 2.00041 2.90646 1.90478V1.55847C2.90646 1.46283 2.82987 1.38531 2.7354 1.38531Z"
      fill="white"
    />
    <path
      d="M2.7354 3.46318C2.64093 3.46318 2.56435 3.5407 2.56435 3.63633V3.98265C2.56435 4.07828 2.64093 4.1558 2.7354 4.1558C2.82987 4.1558 2.90646 4.07828 2.90646 3.98265V3.63633C2.90646 3.5407 2.82987 3.46318 2.7354 3.46318Z"
      fill="white"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2.7354 0.519531C2.7354 0.519531 3.1877 0.519531 3.60101 0.696499C3.60101 0.696499 4.0001 0.867374 4.30779 1.17884C4.30779 1.17884 4.61547 1.49031 4.78427 1.8943C4.78427 1.8943 4.95909 2.3127 4.95909 2.77056C4.95909 2.77056 4.95909 3.22841 4.78427 3.64681C4.78427 3.64681 4.61547 4.0508 4.30779 4.36227C4.30779 4.36227 4.0001 4.67374 3.60101 4.84461C3.60101 4.84461 3.1877 5.02158 2.7354 5.02158C2.7354 5.02158 2.28311 5.02158 1.86979 4.84461C1.86979 4.84461 1.4707 4.67374 1.16302 4.36227C1.16302 4.36227 0.855337 4.0508 0.686537 3.64681C0.686537 3.64681 0.511719 3.22841 0.511719 2.77056C0.511719 2.77056 0.511719 2.3127 0.686537 1.8943C0.686537 1.8943 0.855337 1.49031 1.16302 1.17884C1.16302 1.17884 1.4707 0.867374 1.86979 0.696499C1.86979 0.696499 2.28311 0.519531 2.7354 0.519531ZM2.7354 0.865843C2.7354 0.865843 2.35248 0.865843 2.00306 1.01545C2.00306 1.01545 1.66543 1.16002 1.40493 1.42372C1.40493 1.42372 1.14442 1.68742 1.00162 2.02921C1.00162 2.02921 0.853824 2.38293 0.853824 2.77056C0.853824 2.77056 0.853824 3.15818 1.00162 3.5119C1.00162 3.5119 1.14442 3.85369 1.40493 4.11739C1.40493 4.11739 1.66543 4.3811 2.00306 4.52566C2.00306 4.52566 2.35248 4.67527 2.7354 4.67527C2.7354 4.67527 3.11832 4.67527 3.46775 4.52566C3.46775 4.52566 3.80538 4.3811 4.06588 4.11739C4.06588 4.11739 4.32638 3.85369 4.46919 3.5119C4.46919 3.5119 4.61698 3.15818 4.61698 2.77056C4.61698 2.77056 4.61698 2.38293 4.46919 2.02921C4.46919 2.02921 4.32638 1.68742 4.06588 1.42372C4.06588 1.42372 3.80538 1.16002 3.46775 1.01545C3.46775 1.01545 3.11832 0.865843 2.7354 0.865843Z"
      fill="white"
    />
    <path
      d="M2.47882 2.07793H3.24856C3.34303 2.07793 3.41961 2.00041 3.41961 1.90478C3.41961 1.80915 3.34303 1.73162 3.24856 1.73162H2.47882C2.23084 1.73162 2.05549 1.90913 2.05549 1.90913C1.88014 2.08663 1.88014 2.33767 1.88014 2.33767C1.88014 2.5887 2.05549 2.7662 2.05549 2.7662C2.23084 2.94371 2.47882 2.94371 2.47882 2.94371H2.99198C3.09826 2.94371 3.17341 3.01979 3.17341 3.01979C3.24856 3.09586 3.24856 3.20344 3.24856 3.20344C3.24856 3.31103 3.17341 3.3871 3.17341 3.3871C3.09826 3.46318 2.99198 3.46318 2.99198 3.46318H2.22225C2.12778 3.46318 2.05119 3.5407 2.05119 3.63633C2.05119 3.73197 2.12778 3.80949 2.22225 3.80949H2.99198C3.23997 3.80949 3.41532 3.63198 3.41532 3.63198C3.59067 3.45448 3.59067 3.20344 3.59067 3.20344C3.59067 2.95241 3.41532 2.77491 3.41532 2.77491C3.23996 2.5974 2.99198 2.5974 2.99198 2.5974H2.47882C2.37255 2.5974 2.2974 2.52133 2.2974 2.52133C2.22225 2.44525 2.22225 2.33767 2.22225 2.33767C2.22225 2.23008 2.2974 2.15401 2.2974 2.15401C2.37255 2.07793 2.47882 2.07793 2.47882 2.07793Z"
      fill="white"
    />
  </svg>
);

const getGoogleLogoUrl = (url: string) =>
  `https://www.google.com/s2/favicons?domain=${url}&sz=128`;

const getTechColorIndex = (uuid: string, N: number) => {
  let pseudorandomBytes =
    uuid.slice(0, 14) + uuid.slice(15, 19) + uuid.slice(20);
  pseudorandomBytes = pseudorandomBytes.replaceAll('-', '');
  let accumulator = 0;

  const pseudoMatch = pseudorandomBytes.match(/.{1,8}/g);
  if (!pseudoMatch) return 0;

  for (const a of pseudoMatch) {
    accumulator = (accumulator + (Number.parseInt(a, 16) % N)) % N;
  }

  return accumulator; // Return the result
};
